# API Specifications - IMPROVED (v2.1)

**Project**: Healthcare CRM and LiveChat Platform  
**Version**: 2.1 (Security Enhanced)  
**Last Updated**: October 08, 2025

---

## Critical Security Improvements

### ⚠️ Breaking Changes from v1.0

1. **Webhook Signature Verification**: Now requires `X-Chatwoot-Timestamp` header
2. **Rate Limiting**: Stricter limits with IP-based throttling
3. **API Versioning**: All endpoints now under `/api/v1/`
4. **JWT Token Expiration**: Reduced to 60 minutes (was unlimited)
5. **CORS**: Restricted to configured origins only

---

## Bridge Service API (Enhanced)

**Base URL**: `https://bridge.yourdomain.com/api/v1`

### Authentication

**For Webhooks**: Signature verification (no Bearer token)  
**For Data APIs**: JWT Bearer token required

```http
Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGc...
```

---

## 1. Webhook Endpoints (SECURITY ENHANCED)

### POST /v1/webhooks/chatwoot/conversation-created

**Security Enhancements**:
- ✅ Replay attack prevention (timestamp validation)
- ✅ Payload size limit (1MB)
- ✅ Idempotency via webhook ID caching
- ✅ Rate limiting: 100 req/min per IP

**Request Headers** (UPDATED):
```http
Content-Type: application/json
X-Chatwoot-Signature: sha256=abc123...
X-Chatwoot-Timestamp: 1696512000  ← NEW: Required for security
```

**Signature Calculation** (UPDATED):
```javascript
// Old (v1.0 - INSECURE)
signature = HMAC-SHA256(payload, secret)

// New (v2.1 - SECURE)
timestamp = Math.floor(Date.now() / 1000)
signedPayload = timestamp + '.' + payload
signature = HMAC-SHA256(signedPayload, secret)

// Send both in headers
headers['X-Chatwoot-Signature'] = 'sha256=' + signature
headers['X-Chatwoot-Timestamp'] = timestamp
```

**Request Body** (unchanged):
```json
{
  "event": "conversation_created",
  "id": 123,
  "account_id": 1,
  "inbox_id": 789,
  "contact_id": 456,
  "status": "open",
  "created_at": "2025-10-05T12:00:00Z",
  "contact": {
    "id": 456,
    "name": "João Silva",
    "email": "joao@example.com",
    "phone_number": "+5511999999999"
  }
}
```

**Response 200 OK** (ENHANCED):
```json
{
  "success": true,
  "webhook_id": 123,
  "queued_at": "2025-10-05T12:00:01Z",
  "krayin_lead_id": 101,
  "contact_mapping_id": 55,
  "processing_status": "queued"
}
```

**Response 401 Unauthorized** (NEW):
```json
{
  "success": false,
  "error": "Timestamp expired",
  "error_code": "TIMESTAMP_EXPIRED",
  "details": "Webhook timestamp is older than 5 minutes",
  "timestamp": "2025-10-05T12:00:00Z"
}
```

**Response 403 Forbidden** (ENHANCED):
```json
{
  "success": false,
  "error": "Invalid signature",
  "error_code": "INVALID_SIGNATURE",
  "details": "Signature verification failed",
  "timestamp": "2025-10-05T12:00:00Z",
  "request_id": "req_abc123"
}
```

**Response 413 Payload Too Large** (NEW):
```json
{
  "success": false,
  "error": "Payload too large",
  "error_code": "PAYLOAD_TOO_LARGE",
  "max_size_bytes": 1048576,
  "received_bytes": 2000000
}
```

**Response 429 Too Many Requests** (NEW):
```json
{
  "success": false,
  "error": "Rate limit exceeded",
  "error_code": "RATE_LIMIT_EXCEEDED",
  "retry_after": 60,
  "limit": 100,
  "window": "1 minute"
}
```

**Rate Limits**:
- 100 requests per minute per IP address
- 1000 requests per hour per IP address
- Webhook ID-based idempotency (24-hour window)

---

### POST /v1/webhooks/chatwoot/message-created

**Security**: Same enhancements as conversation-created endpoint

**Rate Limits**:
- 200 requests per minute per IP
- 2000 requests per hour per IP

**Request Headers**:
```http
Content-Type: application/json
X-Chatwoot-Signature: sha256=abc123...
X-Chatwoot-Timestamp: 1696512000
```

**Request Body**:
```json
{
  "event": "message_created",
  "id": 234,
  "conversation_id": 123,
  "account_id": 1,
  "content": "Olá, preciso agendar uma consulta",
  "message_type": "incoming",
  "content_type": "text",
  "created_at": "2025-10-05T12:01:00Z",
  "sender": {
    "id": 456,
    "name": "João Silva",
    "type": "contact"
  }
}
```

**Response 200 OK** (ASYNC):
```json
{
  "success": true,
  "webhook_id": 234,
  "queued_at": "2025-10-05T12:01:01Z",
  "processing_status": "queued",
  "estimated_processing_time_seconds": 5
}
```

**Response 404 Not Found**:
```json
{
  "success": false,
  "error": "Conversation mapping not found",
  "error_code": "MAPPING_NOT_FOUND",
  "conversation_id": 123,
  "details": "No mapping exists for this conversation. Ensure conversation_created webhook was processed first."
}
```

---

### POST /v1/webhooks/chatwoot/conversation-status-changed

**Security**: Same enhancements as other webhook endpoints

**Rate Limits**:
- 100 requests per minute per IP
- 1000 requests per hour per IP

**Request Body**:
```json
{
  "event": "conversation_status_changed",
  "id": 123,
  "account_id": 1,
  "status": "resolved",
  "previous_status": "open",
  "changed_at": "2025-10-05T12:30:00Z"
}
```

**Response 200 OK**:
```json
{
  "success": true,
  "webhook_id": 123,
  "queued_at": "2025-10-05T12:30:01Z",
  "krayin_lead_id": 101,
  "previous_stage": "In Progress",
  "new_stage": "Follow-up",
  "stage_change_logged": true
}
```

**Stage Mapping** (Configurable):
```
Chatwoot Status → Krayin Stage
──────────────────────────────
open            → In Progress (stage_id: 2)
resolved        → Follow-up (stage_id: 3)
pending         → Waiting (stage_id: 4)
snoozed         → Waiting (stage_id: 4)
```

---

## 2. Data Retrieval Endpoints (JWT ENHANCED)

### Authentication (IMPROVED)

**Token Acquisition**:
```http
POST /api/v1/auth/login
Content-Type: application/json

{
  "email": "user@clinic.com",
  "password": "secure_password"
}
```

**Response**:
```json
{
  "access_token": "eyJ0eXAiOiJKV1QiLCJhbGc...",
  "token_type": "Bearer",
  "expires_in": 3600,
  "expires_at": "2025-10-05T13:00:00Z",
  "abilities": [
    "conversations:read",
    "insights:read"
  ],
  "user": {
    "id": 1,
    "name": "Dr. Maria Santos",
    "email": "user@clinic.com",
    "role": "admin"
  }
}
```

**Token Usage**:
```http
GET /api/v1/chatwoot/conversations/101
Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGc...
Accept: application/json
```

**Token Refresh**:
```http
POST /api/v1/auth/refresh
Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGc...

Response:
{
  "access_token": "new_token_here...",
  "expires_in": 3600
}
```

---

### GET /v1/chatwoot/conversations/{lead_id}

**Authentication**: Required (JWT with `conversations:read` ability)

**Rate Limits**:
- 60 requests per minute per user
- 600 requests per hour per user

**Request Headers**:
```http
Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGc...
Accept: application/json
X-Request-ID: req_abc123  ← NEW: Optional for tracking
```

**Path Parameters**:
- `lead_id` (integer, required): The Krayin lead ID

**Query Parameters**:
- `status` (string, optional): Filter by status (`open`, `resolved`, `pending`, `snoozed`)
- `limit` (integer, optional): Results per page (default: 20, max: 100)
- `page` (integer, optional): Page number (default: 1)
- `sort` (string, optional): Sort field (default: `updated_at`)
- `order` (string, optional): Sort order (`asc`, `desc`, default: `desc`)

**Example Request**:
```http
GET /api/v1/chatwoot/conversations/101?status=open&limit=10&page=1
Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGc...
```

**Response 200 OK** (ENHANCED):
```json
{
  "success": true,
  "lead_id": 101,
  "conversations": [
    {
      "id": 123,
      "chatwoot_conversation_id": 456,
      "status": "open",
      "contact": {
        "name": "João Silva",
        "email": "joao@example.com",
        "phone": "+5511999999999"
      },
      "last_message": {
        "content": "Preciso agendar uma consulta",
        "created_at": "2025-10-05T12:30:00Z",
        "sender_type": "contact"
      },
      "metrics": {
        "message_count": 5,
        "duration_minutes": 45,
        "response_time_avg_minutes": 3
      },
      "created_at": "2025-10-05T12:00:00Z",
      "updated_at": "2025-10-05T12:30:00Z"
    }
  ],
  "pagination": {
    "current_page": 1,
    "per_page": 10,
    "total_pages": 3,
    "total_results": 25,
    "has_more": true
  },
  "filters_applied": {
    "status": "open"
  },
  "response_time_ms": 45.3
}
```

**Response 401 Unauthorized** (TOKEN EXPIRED):
```json
{
  "success": false,
  "error": "Token expired",
  "error_code": "TOKEN_EXPIRED",
  "expires_at": "2025-10-05T12:00:00Z",
  "message": "Please refresh your token"
}
```

**Response 403 Forbidden** (INSUFFICIENT PERMISSIONS):
```json
{
  "success": false,
  "error": "Insufficient permissions",
  "error_code": "FORBIDDEN",
  "required_ability": "conversations:read",
  "user_abilities": ["insights:read"]
}
```

**Response 404 Not Found**:
```json
{
  "success": false,
  "error": "No conversations found for this lead",
  "error_code": "NO_CONVERSATIONS",
  "lead_id": 101
}
```

**Caching**:
- Cache-Control: `private, max-age=300` (5 minutes)
- ETag support for conditional requests
- If-None-Match header supported

---

### GET /v1/chatwoot/messages/{conversation_id}

**Authentication**: Required (JWT with `conversations:read` ability)

**Rate Limits**: 60 req/min per user

**Path Parameters**:
- `conversation_id` (integer, required): The conversation mapping ID

**Query Parameters**:
- `limit` (integer, optional): Messages per page (default: 50, max: 200)
- `before_id` (integer, optional): Pagination cursor (get messages before this ID)
- `after_id` (integer, optional): Pagination cursor (get messages after this ID)

**Example Request**:
```http
GET /api/v1/chatwoot/messages/123?limit=50&before_id=1000
Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGc...
```

**Response 200 OK** (ENHANCED):
```json
{
  "success": true,
  "conversation_id": 123,
  "chatwoot_conversation_id": 456,
  "messages": [
    {
      "id": 1001,
      "content": "Olá! Como posso ajudar?",
      "message_type": "outgoing",
      "content_type": "text",
      "sender": {
        "id": 10,
        "name": "Dr. Maria Santos",
        "type": "agent",
        "avatar_url": "https://..."
      },
      "created_at": "2025-10-05T12:00:30Z",
      "read_at": "2025-10-05T12:00:45Z"
    },
    {
      "id": 1002,
      "content": "Preciso agendar uma consulta",
      "message_type": "incoming",
      "content_type": "text",
      "sender": {
        "id": 456,
        "name": "João Silva",
        "type": "contact",
        "avatar_url": null
      },
      "created_at": "2025-10-05T12:01:00Z",
      "read_at": null
    }
  ],
  "pagination": {
    "has_more": true,
    "next_before_id": 1000,
    "total_count": 150
  },
  "conversation_metadata": {
    "status": "open",
    "assignee": "Dr. Maria Santos",
    "created_at": "2025-10-05T12:00:00Z"
  },
  "response_time_ms": 32.1
}
```

**WebSocket Alternative** (OPTIONAL):
```javascript
// For real-time message updates
const ws = new WebSocket('wss://bridge.yourdomain.com/ws/conversations/123');
ws.onmessage = (event) => {
  const message = JSON.parse(event.data);
  console.log('New message:', message);
};
```

---

### GET /v1/ai/insights/{lead_id}

**Authentication**: Required (JWT with `insights:read` ability)

**Rate Limits**: 30 req/min per user (lower due to computation cost)

**Path Parameters**:
- `lead_id` (integer, required): The Krayin lead ID

**Query Parameters**:
- `period` (string, optional): Time period for analysis (`7d`, `30d`, `90d`, `all`, default: `30d`)
- `include_history` (boolean, optional): Include historical insights (default: false)

**Example Request**:
```http
GET /api/v1/ai/insights/101?period=30d&include_history=true
Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGc...
```

**Response 200 OK** (ENHANCED):
```json
{
  "success": true,
  "lead_id": 101,
  "period": "30d",
  "current_insights": {
    "metrics": {
      "total_conversations": 5,
      "resolved_conversations": 3,
      "pending_conversations": 2,
      "resolution_rate": 60.0,
      "average_response_time_minutes": 15,
      "total_messages": 45,
      "average_messages_per_conversation": 9.0,
      "last_interaction": "2025-10-05T12:30:00Z"
    },
    "performance_score": 7.5,
    "engagement_level": "high",
    "trend": "improving",
    "suggestions": [
      {
        "id": "sug_001",
        "priority": "high",
        "category": "engagement",
        "message": "High engagement detected. Consider moving to 'Hot Lead' stage.",
        "action": {
          "type": "update_stage",
          "stage_id": 5,
          "stage_name": "Hot Lead"
        }
      },
      {
        "id": "sug_002",
        "priority": "medium",
        "category": "follow_up",
        "message": "2 conversations pending for more than 24 hours. Follow up recommended.",
        "action": {
          "type": "create_task",
          "task_type": "follow_up_call"
        }
      },
      {
        "id": "sug_003",
        "priority": "low",
        "category": "optimization",
        "message": "Customer responds quickly. Good candidate for appointment scheduling.",
        "action": {
          "type": "schedule_appointment"
        }
      }
    ]
  },
  "historical_insights": [
    {
      "calculated_at": "2025-10-01T00:00:00Z",
      "performance_score": 6.8,
      "resolution_rate": 55.0,
      "engagement_level": "medium"
    },
    {
      "calculated_at": "2025-09-24T00:00:00Z",
      "performance_score": 6.2,
      "resolution_rate": 50.0,
      "engagement_level": "medium"
    }
  ],
  "generated_at": "2025-10-05T13:00:00Z",
  "cache_ttl_seconds": 3600
}
```

**Performance Score Breakdown** (NEW):
```json
{
  "performance_score_breakdown": {
    "total": 7.5,
    "components": {
      "resolution_rate": {
        "score": 6.0,
        "weight": 0.4,
        "contribution": 2.4
      },
      "response_time": {
        "score": 8.5,
        "weight": 0.3,
        "contribution": 2.55
      },
      "engagement": {
        "score": 8.5,
        "weight": 0.3,
        "contribution": 2.55
      }
    }
  }
}
```

**Caching**:
- Cache-Control: `private, max-age=3600` (1 hour)
- Insights recalculated daily at midnight
- Stale-while-revalidate: 7200 (2 hours)

---

## 3. LGPD Compliance Endpoints (NEW)

### POST /v1/lgpd/consent

**Authentication**: Required (JWT)

**Request Body**:
```json
{
  "contact_id": 456,
  "consent_type": "health_data",
  "consent_granted": true,
  "ip_address": "192.168.1.1",
  "user_agent": "Mozilla/5.0..."
}
```

**Response 201 Created**:
```json
{
  "success": true,
  "consent_id": 789,
  "contact_id": 456,
  "consent_type": "health_data",
  "status": "granted",
  "granted_at": "2025-10-05T12:00:00Z",
  "consent_version": "1.0"
}
```

---

### DELETE /v1/lgpd/data/{contact_id}

**Authentication**: Required (JWT with `admin:write` ability)

**Description**: Complete data erasure (LGPD Right to Erasure)

**Request**:
```http
DELETE /api/v1/lgpd/data/456
Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGc...
Content-Type: application/json

{
  "confirmation": "DELETE_ALL_DATA",
  "reason": "User requested data deletion"
}
```

**Response 200 OK**:
```json
{
  "success": true,
  "contact_id": 456,
  "deleted_at": "2025-10-05T13:00:00Z",
  "data_deleted": {
    "conversations": 5,
    "messages": 45,
    "activities": 12,
    "consent_records": 3
  },
  "anonymization_applied": true,
  "audit_log_id": 12345
}
```

---

### GET /v1/lgpd/export/{contact_id}

**Authentication**: Required (JWT)

**Description**: Data portability (LGPD Right to Data Portability)

**Response 200 OK**:
```json
{
  "success": true,
  "contact_id": 456,
  "export_generated_at": "2025-10-05T13:00:00Z",
  "data": {
    "contact": { /* full contact data */ },
    "conversations": [ /* all conversations */ ],
    "messages": [ /* all messages */ ],
    "consent_records": [ /* all consents */ ],
    "audit_logs": [ /* access logs */ ]
  },
  "format": "json",
  "download_url": "https://bridge.yourdomain.com/downloads/export-456-20251005.json",
  "expires_at": "2025-10-06T13:00:00Z"
}
```

**Response Headers**:
```http
Content-Disposition: attachment; filename="data-export-456-2025-10-05.json"
Content-Type: application/json
```

---

## 4. Error Handling (STANDARDIZED)

### Standard Error Response Format

```json
{
  "success": false,
  "error": "Human-readable error message",
  "error_code": "SPECIFIC_ERROR_CODE",
  "details": "Additional technical details",
  "timestamp": "2025-10-05T12:00:00Z",
  "request_id": "req_abc123",
  "documentation_url": "https://docs.yourdomain.com/errors/ERROR_CODE"
}
```

### HTTP Status Codes

| Code | Meaning | Usage |
|------|---------|-------|
| 200 | OK | Successful request |
| 201 | Created | Resource created successfully |
| 202 | Accepted | Request accepted (async processing) |
| 400 | Bad Request | Invalid request data |
| 401 | Unauthorized | Missing or invalid authentication |
| 403 | Forbidden | Insufficient permissions |
| 404 | Not Found | Resource not found |
| 409 | Conflict | Duplicate resource or conflict |
| 413 | Payload Too Large | Request body exceeds limit |
| 422 | Unprocessable Entity | Validation failed |
| 429 | Too Many Requests | Rate limit exceeded |
| 500 | Internal Server Error | Server error |
| 502 | Bad Gateway | Upstream service error |
| 503 | Service Unavailable | Service temporarily unavailable |

### Error Codes Reference

| Code | HTTP | Description | Action |
|------|------|-------------|--------|
| `INVALID_SIGNATURE` | 403 | Webhook signature failed | Check webhook secret |
| `TIMESTAMP_EXPIRED` | 401 | Webhook too old | Ensure clocks are synced |
| `TOKEN_EXPIRED` | 401 | JWT expired | Refresh token |
| `FORBIDDEN` | 403 | Insufficient permissions | Check user abilities |
| `MAPPING_NOT_FOUND` | 404 | No mapping exists | Create mapping first |
| `KRAYIN_API_ERROR` | 502 | Krayin API failed | Check Krayin status |
| `CHATWOOT_API_ERROR` | 502 | Chatwoot API failed | Check Chatwoot status |
| `VALIDATION_ERROR` | 422 | Request validation failed | Check request body |
| `RATE_LIMIT_EXCEEDED` | 429 | Too many requests | Wait and retry |
| `PAYLOAD_TOO_LARGE` | 413 | Payload > 1MB | Reduce payload size |
| `DUPLICATE_RESOURCE` | 409 | Resource exists | Use existing resource |

### Retry Logic (IMPLEMENTED)

**Exponential Backoff**:
```
Retry 1: Wait 1 second
Retry 2: Wait 2 seconds
Retry 3: Wait 4 seconds
Retry 4: Wait 8 seconds
Retry 5: Wait 16 seconds
Max retries: 5
```

**Client-Side Implementation**:
```javascript
async function callBridgeAPI(url, options, retries = 5) {
  for (let i = 0; i < retries; i++) {
    try {
      const response = await fetch(url, options);
      
      if (response.ok) {
        return await response.json();
      }
      
      // Don't retry client errors (4xx)
      if (response.status >= 400 && response.status < 500) {
        throw new Error(`Client error: ${response.status}`);
      }
      
      // Retry server errors (5xx)
      if (i < retries - 1) {
        const delay = Math.pow(2, i) * 1000;
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    } catch (error) {
      if (i === retries - 1) throw error;
    }
  }
}
```

---

## 5. Rate Limiting (COMPREHENSIVE)

### Rate Limit Headers

All API responses include rate limit headers:

```http
X-RateLimit-Limit: 60
X-RateLimit-Remaining: 45
X-RateLimit-Reset: 1696512600
X-RateLimit-Reset-After: 45
Retry-After: 60  (only when rate limited)
```

### Rate Limits by Endpoint Type

| Endpoint Type | Per Minute | Per Hour | Scope |
|---------------|------------|----------|-------|
| Webhooks | 100 | 1000 | Per IP |
| Data Retrieval | 60 | 600 | Per User |
| AI Insights | 30 | 300 | Per User |
| LGPD Exports | 5 | 20 | Per User |
| Authentication | 5 | 20 | Per IP |

### Rate Limit Strategies

1. **Token Bucket Algorithm**: For API endpoints
2. **Sliding Window**: For webhooks
3. **Distributed Rate Limiting**: Redis-based across instances

---

## 6. Versioning Strategy

**Current Version**: v1  
**URL Pattern**: `/api/v1/...`

**Version Support Policy**:
- Current version (v1): Fully supported
- Previous version (v0): Deprecated (6-month notice)
- Legacy version: Sunset (removed after 12 months)

**Deprecation Headers**:
```http
Deprecation: Sun, 11 Oct 2026 00:00:00 GMT
Sunset: Sun, 11 Apr 2027 00:00:00 GMT
Link: <https://docs.yourdomain.com/migration/v2>; rel="successor-version"
```

---

## 7. Testing & Sandbox

### Sandbox Environment

**Base URL**: `https://sandbox-bridge.yourdomain.com/api/v1`

**Test Credentials**:
```json
{
  "email": "test@sandbox.com",
  "password": "sandbox_test_123",
  "webhook_secret": "sandbox_secret_key_123"
}
```

**Sandbox Limitations**:
- Data reset daily at midnight UTC
- Rate limits reduced by 50%
- No real external API calls
- Mock data for Krayin/Chatwoot

### API Testing Tools

**Postman Collection**: Available at `/docs/postman-collection.json`

**cURL Examples**:
```bash
# Test webhook signature
curl -X POST https://bridge.yourdomain.com/api/v1/webhooks/chatwoot/conversation-created \
  -H "Content-Type: application/json" \
  -H "X-Chatwoot-Signature: sha256=..." \
  -H "X-Chatwoot-Timestamp: $(date +%s)" \
  -d @webhook-payload.json

# Test authenticated endpoint
curl -X GET https://bridge.yourdomain.com/api/v1/chatwoot/conversations/101 \
  -H "Authorization: Bearer YOUR_TOKEN_HERE"
```

---

**Document Version**: 2.1  
**Last Updated**: October 08, 2025  
**Breaking Changes**: Yes (from v1.0)  
**Migration Guide**: https://docs.yourdomain.com/migration/v2.1